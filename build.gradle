plugins {
	id 'java'
    id 'org.springframework.boot' version '2.6.3'
    id 'com.github.spotbugs' version '5.0.6'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
}

group = 'io.github.mfvanek'
version = '0.4.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

configurations.all {
    exclude group: 'org.hamcrest'
}

def testContainersVersion = '1.16.3'
def lombokVersion = '1.18.22'
def springBootVersion = '2.6.3'
def springdocVersion = '1.6.6'
def pgihVersion = '0.4.0'

dependencies {
    implementation 'io.micrometer:micrometer-registry-prometheus:1.8.2'
	implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
	implementation "org.springframework.boot:spring-boot-starter-jdbc:$springBootVersion"
	implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    implementation "org.springdoc:springdoc-openapi-ui:$springdocVersion"
    implementation "org.springdoc:springdoc-openapi-security:$springdocVersion"
    implementation 'org.liquibase:liquibase-core:4.7.1'
    implementation 'org.postgresql:postgresql:42.3.2'
    implementation "org.testcontainers:testcontainers:$testContainersVersion"
    implementation "org.testcontainers:postgresql:$testContainersVersion"
    implementation "io.github.mfvanek:pg-index-health:$pgihVersion"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
	annotationProcessor "org.projectlombok:lombok:$lombokVersion"

	testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
	testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    testImplementation "io.github.mfvanek:pg-index-health-test-starter:$pgihVersion"
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.13'

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

test {
	useJUnitPlatform()
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

springBoot {
    buildInfo()
}

checkstyle {
    toolVersion '8.45'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

spotbugsMain {
    reports {
        html.enabled = true
    }
}
spotbugsTest {
    reports {
        html.enabled = true
    }
}
spotbugs {
    showProgress = true
    excludeFilter = file("config/spotbugs/exclude.xml")
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}
jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 1
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.98
            }
        }
    }
}

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

pmd {
    consoleOutput = true
    toolVersion = "6.42.0"
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}
