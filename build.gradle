import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import com.github.spotbugs.snom.SpotBugsTask
import info.solidsoft.gradle.pitest.PitestTask

plugins {
	id("java")
    id("org.springframework.boot") version "2.7.9"
    id("io.spring.dependency-management") version "1.1.0"
    id("com.github.spotbugs") version "5.0.14"
    id("checkstyle")
    id("jacoco")
    id("pmd")
    id("org.sonarqube") version "4.0.0.2929"
    id("info.solidsoft.pitest") version "1.9.11"
    id("io.freefair.lombok") version "8.0.1"
    id("com.google.osdetector") version "1.7.3"
    id("net.ltgt.errorprone") version "3.1.0"
}

group = "io.github.mfvanek"
version = "0.9.2-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
tasks.withType(JavaCompile).configureEach {
    options.errorprone.disableWarningsInGeneratedCode.set(true)
}

repositories {
	mavenLocal()
	mavenCentral()
}

configurations.configureEach {
    exclude(group: "org.hamcrest")
}

def springdocVersion = "1.7.0"
def pgihVersion = "0.9.1"
def postgresqlVersion = "42.6.0"
dependencies {
    implementation("io.micrometer:micrometer-registry-prometheus:1.11.0")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-jdbc")
	implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springdoc:springdoc-openapi-ui:$springdocVersion")
    implementation("org.springdoc:springdoc-openapi-security:$springdocVersion")
    implementation("org.liquibase:liquibase-core:4.22.0")
    runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")
    implementation(enforcedPlatform("org.testcontainers:testcontainers-bom:1.18.1"))
    implementation("org.testcontainers:testcontainers")
    implementation("org.testcontainers:postgresql")
    implementation("io.github.mfvanek:pg-index-health:$pgihVersion")
    implementation("com.google.code.findbugs:jsr305:3.0.2")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    testImplementation(enforcedPlatform("org.junit:junit-bom:5.9.3"))
	testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-starter-webflux")
	testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("io.github.mfvanek:pg-index-health-test-starter:$pgihVersion")
    testImplementation("org.apache.httpcomponents:httpclient:4.5.14")
    testImplementation("org.postgresql:postgresql:${postgresqlVersion}")

    // https://github.com/netty/netty/issues/11020
    if (osdetector.arch == "aarch_64") {
        testImplementation("io.netty:netty-all:4.1.92.Final")
    }

    pitest("it.mulders.stryker:pit-dashboard-reporter:0.1.5")
    checkstyle("com.thomasjensen.checkstyle.addons:checkstyle-addons:7.0.1")
    errorprone("com.google.errorprone:error_prone_core:2.19.1")
}

test {
	useJUnitPlatform()
    dependsOn(checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest)
    maxParallelForks = 1
    finalizedBy(jacocoTestReport)
    finalizedBy(jacocoTestCoverageVerification)
}

springBoot {
    buildInfo()
}

checkstyle {
    toolVersion = "10.7.0"
    configFile = file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

spotbugs {
    showProgress.set(true)
    effort.set(Effort.MAX)
    reportLevel.set(Confidence.LOW)
    excludeFilter.set(file("config/spotbugs/exclude.xml"))
}
tasks.withType(SpotBugsTask).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

def jacocoExclude = ["**/PgIndexHealthSpringBootDemoApplication.class"]
jacocoTestReport {
    dependsOn(test)
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}
jacocoTestCoverageVerification {
    dependsOn(test)
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
    violationRules {
        rule {
            limit {
                counter = "CLASS"
                value = "MISSEDCOUNT"
                maximum = 0
            }
        }
        rule {
            limit {
                counter = "METHOD"
                value = "MISSEDCOUNT"
                maximum = 0
            }
        }
        rule {
            limit {
                counter = "LINE"
                value = "MISSEDCOUNT"
                maximum = 1
            }
        }
        rule {
            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 0.97
            }
        }
    }
}

check {
    dependsOn(jacocoTestReport, jacocoTestCoverageVerification)
}

pmd {
    consoleOutput = true
    toolVersion = "6.54.0"
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}

sonarqube {
    properties {
        property("sonar.projectKey", "mfvanek_pg-index-health-spring-boot-demo")
        property("sonar.organization", "mfvanek")
        property("sonar.host.url", "https://sonarcloud.io")
    }
}

pitest {
    verbosity = "DEFAULT"
    junit5PluginVersion = "1.1.2"
    pitestVersion = "1.10.4"
    threads = 4
    outputFormats = System.getenv("STRYKER_DASHBOARD_API_KEY") != null ? ["stryker-dashboard"] : ["HTML"]
    timestampedReports = false
    mutationThreshold = 100
    excludedClasses = ["io.github.mfvanek.pg.index.health.demo.config.*",
                       "io.github.mfvanek.pg.index.health.demo.PgIndexHealthSpringBootDemoApplication"]
    excludedTestClasses = ["io.github.mfvanek.pg.index.health.demo.ActuatorEndpointTest"]
}
tasks.withType(PitestTask).configureEach {
    mustRunAfter(test)
}

build {
    dependsOn("pitest")
}
