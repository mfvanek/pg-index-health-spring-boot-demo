plugins {
	id 'java'
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'com.github.spotbugs' version '5.0.9'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'org.sonarqube' version '3.3'
    id 'info.solidsoft.pitest' version '1.9.0'
    id 'io.freefair.lombok' version '6.5.0.3'
}

group = 'io.github.mfvanek'
version = '0.6.2-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
	mavenLocal()
	mavenCentral()
}

configurations.all {
    exclude group: 'org.hamcrest'
}

def springdocVersion = '1.6.9'
def pgihVersion = '0.6.1'

dependencies {
    implementation 'io.micrometer:micrometer-registry-prometheus:1.9.2'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springdoc:springdoc-openapi-ui:$springdocVersion"
    implementation "org.springdoc:springdoc-openapi-security:$springdocVersion"
    implementation 'org.liquibase:liquibase-core:4.15.0'
    implementation 'org.postgresql:postgresql:42.4.2'
    implementation 'org.testcontainers:testcontainers'
    implementation 'org.testcontainers:postgresql'
    implementation "io.github.mfvanek:pg-index-health:$pgihVersion"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "io.github.mfvanek:pg-index-health-test-starter:$pgihVersion"
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.13'
}

dependencyManagement {
    imports {
        mavenBom 'org.testcontainers:testcontainers-bom:1.17.3'
    }
}

test {
	useJUnitPlatform()
    dependsOn checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest
    maxParallelForks = 1
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

springBoot {
    buildInfo()
}

checkstyle {
    toolVersion '10.3.1'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

spotbugsMain {
    reports {
        html.enabled = true
    }
}
spotbugsTest {
    reports {
        html.enabled = true
    }
}
spotbugs {
    showProgress = true
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file("config/spotbugs/exclude.xml")
}

def jacocoExclude = ['**/PgIndexHealthSpringBootDemoApplication.class']
jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
    reports {
        xml.enabled true
        html.enabled true
    }
}
jacocoTestCoverageVerification {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
    violationRules {
        rule {
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 1
            }
        }
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.97
            }
        }
    }
}

check.dependsOn jacocoTestReport, jacocoTestCoverageVerification

pmd {
    consoleOutput = true
    toolVersion = "6.47.0"
    ruleSetFiles = files("config/pmd/pmd.xml")
    ruleSets = []
}

sonarqube {
    properties {
        property "sonar.projectKey", "mfvanek_pg-index-health-spring-boot-demo"
        property "sonar.organization", "mfvanek"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

pitest {
    verbose = false
    junit5PluginVersion = '1.0.0'
    pitestVersion = '1.9.4'
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 100
    excludedClasses = ['io.github.mfvanek.pg.index.health.demo.config.*',
                       'io.github.mfvanek.pg.index.health.demo.PgIndexHealthSpringBootDemoApplication']
    excludedTestClasses = ['io.github.mfvanek.pg.index.health.demo.ActuatorEndpointTest']
}

tasks.named('pitest').configure {
    mustRunAfter test
}
build.dependsOn 'pitest'
